const express = require('express');
const { HOST, PORT } = require('./config.json');
const log = console.log;
const app = express();


/**
 * это нужно чтобы отключить кэширование страницы в браузере
 * если так не сделать то в панели разработчика
 * даже если серверная программа возвращает код статуса 200
 * можно увидеть код 304 - запрашиваемый ресурс не был изменен 
 * с момента последнего запроса, и клиент использует кэшированную версию ресурса
 */
app.use((req, res, next) => {
    res.set('Cache-Control', 'no-store');
    next();
}); // middleware


// версия 1
// app.get('*', (req, res) => {
//     res.send('Это корневой маршрут');
// });

// app.get('/users', (req, res) => { // сюда НЕ дойдёт
//     res.send('Это список пользователей');
// });


// версия 2
app.get('/users', (req, res) => { // сначала более специфичные маршруты
    res.status(200).send('Список пользователей');
});

app.get('/products', (req, res) => { // сначала более специфичные маршруты
    res.status(200).send('Список продуктов');
});

app.get('*', (req, res) => { // в конце корневой маршрут 
    res.status(404).send('Страница не найдена');
}); // или маршрут по умолчанию - для всех несуществующих путей

app.listen(PORT, HOST, () => log(`http://${HOST}:${PORT}/`));

/*
Причины, почему корневой маршрут должен быть внизу:

1. Порядок обработки маршрутов:
    В Express маршруты обрабатываются в порядке их определения в коде. 
    Если корневой маршрут будет объявлен раньше, 
    он может перехватить все входящие запросы, 
    прежде чем они смогут дойти до других, 
    более специфичных маршрутов. 
    Это может привести к тому, что ваши остальные маршруты 
    не будут обработаны должным образом.

2. Специфичность маршрутов:
    Чем более специфичным является маршрут, тем выше его приоритет. 
    Это значит, что сначала обрабатываются более строгие и 
    детализированные запросы, а затем, если ни один из них не совпадает, 
    выполняется корневой маршрут (или маршрут по умолчанию).

3. Обработка ошибок:
    Размещение корневого маршрута внизу упрощает обработку ошибок. 
    Вы можете установить обработчики ошибок для конкретных маршрутов, 
    а в качестве последнего шага вы можете разместить корневой маршрут 
    для обработки всех несуществующих путей.
*/

/*
Некоторые часто используемые статус коды:
    200 OK: Успешный запрос.
    201 Created: Запрос выполнен успешно, и ресурс был создан.
    204 No Content: Запрос выполнен успешно, но нет содержимого для отправки.
    400 Bad Request: Ошибка клиента (неверный запрос).
    401 Unauthorized: Необходима аутентификация.
    403 Forbidden: Доступ запрещен.
    404 Not Found: Запрашиваемый ресурс не найден.
    500 Internal Server Error: Внутренняя ошибка сервера.

Использование правильных статус кодов важно для:
- обеспечения соответствия стандартам HTTP 
- улучшения взаимодействия API с клиентами
*/